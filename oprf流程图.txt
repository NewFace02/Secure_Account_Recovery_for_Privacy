         Server（知道 k）              Client（知道 x_kal, x_priv）         
───────────────────────────────────────────────|───────────────────────────────────────────
(sk, pk) ←$ HomKeyGen()                        |  # Paillier 密钥对生成
[k]    = HomEnc_pk(k)                          |  # 同态加密服务器密钥 k
pk, [k]  ─────────────────────────────────────▶ |  # 公钥和加密的 k 发送给客户端

# ========== 客户端（盲化并构造同态密文[z]） ==========
r,s ←$ {1,…,p}                                  |  
t ←$ {1,…,N/p}                                |  # 随机盲化因子 , 速率/域分离参数 s
r ←$ {1,…,N/p} 
P = H1(x_priv)^r                               |  # 把私密输入 x_priv Hash 到群上再盲化
[z] = HomEval_pk( t·p 
           + s·( [k] + H3(x_kal) ) )           |  # 同态加密：算出z=tp + s·(k + H3(x_kal))的密文，
    = Enc_pk(t·p)*([k]·Enc_pk(H3(x_kal)))^s                                          |
     OPRF 〈α = P, [z]〉──────────────────────▶ |  # α 和同态密文一起发给服务器

# ========== 服务器（同态解密并求幂） ==========
                                       stop if query limit exceeded  
z = HomDec_sk([z])                          |  # 解密得到 z = tp + s·(k + H3(x_kal))
z = z mod p                                 |  # 取模 p 得到服务器端标量
β = α^(1/z)                                 |  # 用逆元 1/z 对 α 求幂
←───────────────────────────────〈β〉       |  # 把 β 返回给客户端

# ========== 客户端（去盲 & 输出） ==========
γ = β^(s/r)                                  |  # 去盲：(α^(1/z))^(s/r) = H1(x_priv)^( 1/(r(k+H3(x_kal))) )
输出  H2(x_priv, x_kal, γ)                   |  # 最终哈希输出作为 PRF_k(x_priv, x_kal)
